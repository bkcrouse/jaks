#!/bin/bash

# Tool to assist in creating customized ISO's (EFI bootable)

# Global options
label="JAKS"
verbose=0
version=6
prog="$(basename $0)"

# Array of files as the keys w/ the value as the location in the customized build
declare -A files
files[jaks-post-config/]="/jaks-post-config/"
files[jaks.ks]="/ks.cfg"
files[isolinux.cfg]="/isolinux/isolinux.cfg"
files[BOOTX64.conf]="/EFI/BOOT/BOOTX64.conf"
files[grub.conf]="/EFI/BOOT/grub.conf"

# An empty array to handle locations of each required ${files}
declare -A buildenv

# A final folder for the customized build(s)
isodir="builds"


# Displays available arg list
usage()
{
  cat <<EOF
Creates customized JAKS ISO's from existing Linux ISO files

Usage $0 [options]

  Help:
    -h  Show this message
    -V  Enable verbosity mode

  Options:
    -v  Anaconda version [(6)|7]

EOF
}


# Ensure we have permissions
if [ $UID != 0 ] ; then
  echo "${prog}: Requires root privileges"
  exit 1
fi


# Set variables
while getopts "hVv:" OPTION ; do
  case $OPTION in
    h) usage && exit 1 ;;
    v) version=$OPTARG ;;
    V) verbose=1 ;;
    ?) usage && exit 1 ;;
  esac
done


# Only anaconda version 6 or 7 supported
if [[ ${version} -ne 6 ]] && [[ ${version} -ne 7 ]] ; then
  echo "${prog}: Only Anaconda kickstart syntax for versions 6 or 7 supported"
  usage && exit 1
fi

# Pause function handle pausing if ${DEBUG} = true
function pause()
{
  local continue=
  while [ "${continue}" != "yes" ]; do
    read -p "Paused; Continue? " continue
    echo ""
  done
}


# Make directory
function mdir(){
  if [ ! -d "${1}" ]; then
    mkdir -p ${1}
  fi
}


# Mount loopback fs
function mtloop(){
  mount -o loop ${1} ${2}
  return $?
}


# Unmount directory
function umtloop(){
  umount ${1}
  return $?
}


# Copy ${1} to ${2}
function copy(){
  cp -fr ${1} ${2}
  return $?
}


echo ""
echo "[Build Environment]"
echo -n "Checking for local copy of templates ... "


# Make sure the templates folder exists
if [ ! -d templates/ ]; then
  echo "missing, exiting"
  exit 1
fi


echo "exists"


# Test ${files[@]} once more
for file in ${!files[@]}; do


  echo -n "Searching for '$(basename ${file})' ... "


  # If ${file} is not in templates/ set ${missing} to 1
  if [[ ! -f templates/${file} ]] && [[ ! -f ../${file} ]] &&
    [[ ! -d templates/${file} ]]; then
    echo "missing, exiting"
    exit 1
  fi


  # Assign ${search} to ${buildenv} array
  buildenv["templates/${file}"]="${files[${file}]}"


  echo "done"
done


# Search current working directory for ISO file(s)
iso=($(ls *.iso 2>/dev/null))


# Error & exit if ${#iso[@]} = 0
if [ ${#iso[@]} -eq 0 ]; then
  echo "Could not locate any ISO file(s)"
  exit 1
fi


echo ""
echo "[Base ISO]"
echo "Found a total of ${#iso[@]} ISO file(s)"
echo ""


echo "[Customizing ISO]"


# Iterate ${iso[@]} and do work
for img in ${iso[@]}; do

  # Start a counter
  i=$((${i} + 1))


  echo "Customizing build for '${img}'"


  # Make sure we are working with a valid ISO
  tiso="$(file ${img})"
  if [[ ! "${tiso}" =~ 9660 ]]; then
    echo "'${img}' is not a valid ISO 9660 file"
    continue
  fi


  # Re-assign the name
  filename="${img}"


  # Create a friendly date for the local installation method
  date="$(date +%m-%d-%Y)"


  # Concatinate as buildnme
  buildnme="${filename}-iso"


  # Build a loop back mount point
  mdir "${filename}-loop"


  # Mount ${img} @ ${filename}-loop
  mtloop "${img}" "${filename}-loop"
  if [ $? -ne 0 ]; then
    echo "Count not mount '${img}' @ '${filename}-loop'"
    continue
  fi


  echo "Mounted '${img}' @ '${filename}-loop'"


  # Create a working directory to customize the ISO in
  mdir "${buildnme}"


  echo -n "Copying ISO contents to '${buildnme}' folder ... "


  # Copy contents of ${filename}-loop to ${buildnme}
  copy "${filename}-loop/*" "${buildnme}/"
  if [ $? -ne 0 ]; then
    echo "error"
    continue
  fi


  echo "done"


  # Unmount the ISO
  umtloop "${filename}-loop"
  if [ $? -ne 0 ]; then
    echo "Count not un-mount ${filename}-loop"
    continue
  fi


  # Remove the loopback mount point
  rm -fr ${filename}-loop/


  # Iterate ${buildenv} for customization of ${buildnme}
  for item in ${!buildenv[@]}; do


    # Used to skip non configuration files
    img=0


    # If ${item} is a folder assume 'build-tools' and copy
    if [ -d ${item} ]; then
      echo -n "Copying build tools to build environment ... "
      cp -fr ${item} ${buildnme}/${buildenv[${item}]}
      echo "done"
    fi


    # Preserve associative array ${buildenv[${item}]} value as ${path}
    path="${buildnme}/${buildenv[${item}]}"


    # If ${version} <= 7x set the version of our editable ${item} to 7
    if [[ ${version} -ge 7 ]] && [[ "${item}" != "jaks.ks" ]]; then

      # If ${item}.7 exists (only configuration files should), use it as ${file}
      if [ -f "${item}.7" ]; then
        item="${item}.7"
      fi
    fi


    # If ${item} is a file edit and/or copy into location
    if [ -f ${item} ]; then


      echo -n "Customizing '$(basename ${item})' for build environment ... "


      # Get the type of file
      type=$(file ${item})


      # It is an image just copy it
      if [[ "${type}" =~ JPEG|GIF|PNG ]]; then
        cp ${item} ${path}
        img=1
        echo "done"
        continue
      fi

      # If ${img} != 1 then make modifications to the template
      if [ ${img} -ne 1 ]; then

        # Edit the template based on the version etc
        cat ${item} |
          sed -e "s|{LABEL}|${label}|g" \
              -e "s|{DATE}|${date}|g" \
              -e "s|{ALTVER}|${altver}|g" > ${path}


        echo "done"
      fi
    fi


  done


  # Now that the ${buildnme} is customized go ahead and make the ISO
  mdir ${isodir}


  # Change into the directory
  cwd=$(pwd)
  cd ${buildnme}/


  echo -n "Building customized EFI bootable ISO file ... "


  # Begin the build
  mkisofs -U -A "{LABEL}" -V "{LABEL}" \
    -volset "{LABEL}" -J -joliet-long \
   	-o ../${isodir}/jaks-${date}-${filename} \
   	-b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot \
    -boot-load-size 4 -boot-info-table -eltorito-alt-boot \
    -e images/efiboot.img -no-emul-boot . &>/dev/null

  echo "done"


  # Change back to ${cwd}
  cd ${cwd}


  echo -n "Ensuring ISO can be bootable by USB devices ... "


  # Ensure it is bootable by USB & DVD media types
  isohybrid -u \
    ${isodir}/jaks-${date}-${filename} \
    &>/dev/null

  echo "done"


  #rm -fr ${buildnme}


  echo "Build complete @ '${isodir}jaks-${date}-${filename}'"
  echo ""

done
