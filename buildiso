#!/bin/bash

# Tool to assist in creating customized ISO's (EFI bootable)
#Drop into a folder with any RHEL ISO files & run as a privileged user

# Make sure either the SLC or NFS share is online, the system
# has a networking connection & the following folder/files exist
#
# /export/unixshr/linux/
#   |_ build-tools/ - Folder for RHEL build configuration tools
#   |_ kickstart/ - Folder for kickstarts
#   |    |_ rhel.custom.ks - Kickstart configuration script
#   |    |_ templates/ - Folder for configuration file templates
#   |    |    |_ isolinux.cfg - syslinux boot menu configuration
#   |    |    |_ splash.jpg - Backgroup image for boot menu configuration
#   |    |    |_ BOOTX64.conf - Boot menu configuration for EFI installs
#   |    |    |_ grub2.conf - Grub2 boot menu configuration for EFI installs
#


# NFS shares by timezone
declare -A nfs
nfs[PDT]="pdxnfsc01p"
nfs[MDT]="slcnfsc01p"

# NFS share location
nfs_share=/unixshr/linux

# Array of files as the keys w/ the value as the location in the customized build
declare -A files
files[build-tools/]="/build-tools/"
files[rhel.custom.ks]="/ks.cfg"
files[isolinux.cfg]="/isolinux/isolinux.cfg"
files[BOOTX64.conf]="/EFI/BOOT/BOOTX64.conf"
files[grub.cfg]="/EFI/BOOT/grub.cfg"
files[splash.jpg]="/isolinux/splash.jpg"
files[splash.xpm.gz]="/EFI/BOOT/splash.xpm.gz"

# An empty array to handle locations of each required ${files}
declare -A buildenv

# A final folder for the customized build(s)
isodir="builds"


# Pause function handle pausing if ${DEBUG} = true
function pause()
{
  local continue=
  while [ "${continue}" != "yes" ]; do
    read -p "Paused; Continue? " continue
    echo ""
  done
}


# Make directory
function mdir(){
  if [ ! -d "${1}" ]; then
    mkdir -p ${1}
  fi
}


# Mount loopback fs
function mtloop(){
  mount -o loop ${1} ${2}
  return $?
}


# Unmount directory
function umtloop(){
  umount ${1}
  return $?
}


# Copy ${1} to ${2}
function copy(){
  cp -fr ${1} ${2}
  return $?
}


# Get filename
function filename(){
  echo "$(echo "${1}"|awk '{split($0, o, "-");print o[1]"-"o[2]}')"
}


# Get version
function version(){
  echo "$(echo "${1}"|awk '{split($0, o, "-");print o[3]}')"
}


# Get arch
function arch(){
  echo "$(echo "${1}"|awk '{split($0, o, "-");print o[4]}')"
}


# Cleanup build environment on failure & success
function cleanup(){
  echo -n "Cleaning up build environment ... "


  # Find mounted NFS share
  share=$(mount|grep nfs|grep templates|awk '{print $3}')
  if [ "${share}" != "" ]; then
    umount ${share}
  fi

  # If templates/ folder exists remove it
  if [ -d templates ]; then
    rm -fr templates
  fi


  echo "done"
}


# Get the timezone
function timezone(){
  echo "$(date +%Z)"
}


# Ping function
function pinger(){
  ping -c1 ${1} &>/dev/null
  return $?
}


# NFS share
function donfs(){

  # Setup the NFS server based on the configured timezone
  nfs_server="${nfs[$(timezone)]}"
  if [ "${nfs_server}" == "" ]; then
    nfs_server="${nfs[PDT]}"
  fi


  # Ping ${nfs_server} to make sure it is accessible
  pinger "${nfs_server}"
  if [ $? -ne 0 ]; then
    return $?
  fi


  # Mount the NFS share @ ${1}
  mount -t nfs -o cto,nolock ${nfs_server}:${nfs_share} ${1} &>/dev/null
  if [ $? -ne 0 ]; then
    return 2
  fi


  return 0
}


echo -n "Checking for local copy of templates ... "


# Check to see if templates folder exists locally
if [ ! -d templates ]; then

  # Create the NFS mount point
  mdir "templates"
fi


# Set ${missing} to 0
missing=0


# Iterate ${!files[@]} & test
for file in ${!files[@]}; do


  # Search templates/ for ${file}
  search=$(ls templates/ | grep ${file})


  # If ${file} is not in templates/ set ${missing} to 1
  if [[ ${search} == "" ]] || [[ ! -f ${search} ]] && [[ ! -d ${search} ]]; then
    missing=1
    continue
  fi
done


echo $([ ${missing} -eq 0 ] && echo "found" || echo "missing")


# If ${missing} = 1 mount ${nfs_server}
if [ ${missing} -eq 1 ]; then


  echo -n "Mounting NFS share ... "


  # Do the NFS bit
  donfs "templates/"


  if [ $? -eq 1 ]; then
    echo "error, not responding"
    cleanup
    continue
  fi


  if [ $? -eq 2 ]; then
    echo "error mounting share"
    cleanup
    continue
  fi


  echo "done"
fi


# Test ${files[@]} once more
for file in ${!files[@]}; do


  echo -n "Searching for '$(basename ${file})' in 'templates/' ... "


  # Search for ${file}
  search=$(find templates/ -name $(basename ${file})|tail -1)


  # If ${file} is not in templates/ set ${missing} to 1
  if [[ ${search} == "" ]] || [[ ! -f ${search} ]] && [[ ! -d ${search} ]]; then
    echo "missing; check configuration options"
    cleanup
    exit 1
  fi


  # Assign ${search} to ${buildenv} array
  buildenv["${search}"]="${files[${file}]}"


  echo "done"
done


# Search current working directory for RHEL ISO file(s)
iso=($(ls rhel-*.iso))


# Error & exit if ${#iso[@]} = 0
if [ ${#iso[@]} -eq 0 ]; then
  echo "Could not locate any RHEL ISO file(s)"
  cleanup
  exit 1
fi


echo "Found a total of ${#iso[@]} RHEL ISO file(s)"


# Iterate ${iso[@]} and do work
for img in ${iso[@]}; do

  # Start a counter
  i=$((${i} + 1))


  echo "Customizing build for '${img}'"


  # Make sure we are working with a valid ISO
  tiso="$(file ${img})"
  if [[ ! "${tiso}" =~ 9660 ]]; then
    echo "'${img}' is not a valid ISO 9660 file"
    cleanup
    continue
  fi


  # Dice up the name
  filename="$(filename "${img}")"
  ver="$(version "${img}")"
  altver="$(echo "${ver}"|sed "s|\.||g")"
  arch="$(arch "${img}")"


  # Concatinate as buildnme
  buildnme="${filename}-${ver}-${arch}"


  # Build a loop back mount point
  mdir "${buildnme}-loop"


  # Mount ${img} @ ${buildnme}-loop
  mtloop "${img}" "${buildnme}-loop"
  if [ $? -ne 0 ]; then
    echo "Count not mount '${img}' @ '${buildnme}-loop'"
    cleanup
    continue
  fi


  echo "Mounted '${img}' @ '${buildnme}-loop'"


  # Create a working directory to customize the ISO in
  mdir "${buildnme}"


  echo -n "Copying ISO contents to '${buildnme}' folder ... "


  # Copy contents of ${buildnme}-loop to ${buildnme}
  copy "${buildnme}-loop/*" "${buildnme}/"
  if [ $? -ne 0 ]; then
    echo "error"
    cleanup
    continue
  fi


  echo "done"


  # Unmount the ISO
  umtloop "${buildnme}-loop"
  if [ $? -ne 0 ]; then
    echo "Count not un-mount ${buildnme}-loop"
    cleanup
    continue
  fi


  # Remove the loopback mount point
  rm -fr ${buildnme}-loop/

  
  # Iterate ${buildenv} for customization of ${buildnme}
  for item in ${!buildenv[@]}; do


    # Used to skip non configuration files
    img=0


    # If ${item} is a folder assume 'build-tools' and copy
    if [ -d ${item} ]; then
      echo -n "Copying build tools to build environment ... "
      cp -fr ${item} ${buildnme}/${buildenv[${item}]}
      echo "done"
    fi


    # Preserve associative array ${buildenv[${item}]} value as ${path}
    path="${buildnme}/${buildenv[${item}]}"


    # If ${altver} <= 7x set the version of our editable ${item} to 7
    if [[ ${altver} -ge 70 ]] && [[ "${item}" != "rhel.custom.ks" ]]; then

      # If ${item}.7 exists (only configuration files should), use it as ${file}
      if [ -f "${item}.7" ]; then
        item="${item}.7"
      fi
    fi


    # If ${item} is a file edit and/or copy into location
    if [ -f ${item} ]; then


      echo -n "Customizing '$(basename ${item})' for build environment ... "


      # Get the type of file
      type=$(file ${item})


      # It is an image just copy it
      if [[ "${type}" =~ JPEG|GIF|PNG ]]; then

        cp ${item} ${path}
        img=1
        echo "done"
        continue
      fi


      # Edit the template based on the version etc
      cat ${item} |
        sed -e "s|{VER}|${ver}|g" \
            -e "s|{ALTVER}|${altver}|g" > ${path}

      echo "done"
    fi


  done
  

  # Now that the ${buildnme} is customized go ahead and make the ISO
  mdir ${isodir}

  
  # Change into the directory
  cwd=$(pwd)
  cd ${buildnme}/


  echo -n "Building customized EFI bootable ISO file ... "


  # Begin the build
  mkisofs -U -A "RHEL-${ver}" -V "RHEL-${ver}" -volset "RHEL-${ver}" -J -joliet-long \
   	-o ../${isodir}/pacificorp-$(date +%Y%m%d)-rhel-server-${ver}-x86_64-dvd.iso \
   	-b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot \
    -boot-load-size 4 -boot-info-table -eltorito-alt-boot \
    -e images/efiboot.img -no-emul-boot . &>/dev/null

  echo "done"


  # Change back to ${cwd}
  cd ${cwd}


  echo -n "Ensuring ISO can be bootable by USB devices ... "


  # Ensure it is bootable by USB & DVD media types
  isohybrid ${isodir}/pacificorp-$(date +%Y%m%d)-rhel-server-${ver}-x86_64-dvd.iso &>/dev/null

  echo "done"


  rm -fr ${buildnme}


  echo "Build complete @ '${isodir}/pacificorp-$(date +%Y%m%d)-rhel-server-${ver}-x86_64-dvd.iso'"
  echo ""

done


# Clean up mounts etc
cleanup
